name: Build and Deploy
on:
  workflow_dispatch: {}
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 6.32.9
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: 'pnpm-lock.yaml'
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: pnpm i --frozen-lockfile || pnpm i
      - name: Screenshot image
        run: |
          pnpm i -g typescript
          cd tools
          tsc screenshot.ts
          \mv screenshot.js screenshot.cjs
          cd ..
          node tools/screenshot.cjs
      - name: Build
        run: |
          pnpm run build
          tar -zcvf dist.tar.gz dist
      - uses: actions/configure-pages@v3
      - uses: actions/upload-pages-artifact@v2
        with:
          path: dist
      - name: Scp file via ssh to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "dist.tar.gz"
          target: "/tmp/"
      - name: Executing remote ssh commands
        # env:
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          # envs:
          script: |
            cd /tmp/
            tar -zxvf dist.tar.gz
            rsync -avz dist/ /www/wwwroot/ygqygq2.com/
            rm -rf dist.tar.gz dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
